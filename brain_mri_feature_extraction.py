# -*- coding: utf-8 -*-
"""Brain_MRI_feature extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WtpDdXrNpia_TwbYWiE86pR-a_mbLTwz
"""

# Installation of pyradiomics and SimpleITK python tools
!pip install pyradiomics
!pip install pandas SimpleITK

# Import the necessary library
import os
import SimpleITK as sitk
import pandas as pd
from radiomics import featureextractor

Figure 1. 3D views of MR brain tumor images with mask.

# Define paths to the folders containing the images and masks
image_folder = &#39;/content/drive/MyDrive/Lab_Experiment/FLAIR_MRI_Images&#39;
mask_folder = &#39;/content/drive/MyDrive/Lab_Experiment/Segmented&#39;

# Initialize the feature extractor
extractor = featureextractor.RadiomicsFeatureExtractor()

# Enable specific feature classes
extractor.enableFeatureClassByName(&#39;firstorder&#39;)
extractor.enableFeatureClassByName(&#39;shape&#39;)
extractor.enableFeatureClassByName(&#39;glcm&#39;)
extractor.enableFeatureClassByName(&#39;glrlm&#39;)
extractor.enableFeatureClassByName(&#39;glszm&#39;)

# Labels for the regions of interest
labels_of_interest = [1, 2, 4]

# Initialize a list to store the features
features_list = []

# Get a sorted list of image and mask files to ensure they are paired correctly
image_files = sorted(os.listdir(image_folder))
mask_files = sorted(os.listdir(mask_folder))

# Iterate over the image and mask files
for image_file, mask_file in zip(image_files, mask_files):
# Construct full file paths
image_path = os.path.join(image_folder, image_file)
mask_path = os.path.join(mask_folder, mask_file)

# Load the image and mask
image = sitk.ReadImage(image_path)
mask = sitk.ReadImage(mask_path)

# Extract features for each label of interest
for label in labels_of_interest:
result = extractor.execute(image, mask, label=label)

# Add the file name and label to the results for reference
result[&#39;Image&#39;] = image_file
result[&#39;Mask&#39;] = mask_file
result[&#39;Label&#39;] = label

# Append the result to the list
features_list.append(result)

# Create a DataFrame from the list of features
df = pd.DataFrame(features_list)

# Save the DataFrame to a CSV file
output_csv_path = &#39;Lab_Experiment.csv&#39;
df.to_csv(output_csv_path, index=False)

for label in labels_of_interest:
    result = extractor.execute(image, mask, label=label)

    # Add the file name and label to the results for reference
    result['Image'] = image_file
    result['Mask'] = mask_file
    result['Label'] = label

    # Append the result to the list
    features_list.append(result)

try:
    image = sitk.ReadImage(image_path)
    mask = sitk.ReadImage(mask_path)
except Exception as e:
    print(f"Error loading {image_file} or {mask_file}: {e}")
    continue

import matplotlib.pyplot as plt

def show_image(image, mask=None):
    image_array = sitk.GetArrayFromImage(image)
    if mask:
        mask_array = sitk.GetArrayFromImage(mask)
        plt.figure(figsize=(10, 5))
        plt.subplot(1, 2, 1)
        plt.imshow(image_array[int(image_array.shape[0]/2), :, :], cmap='gray')
        plt.title('Image')
        plt.subplot(1, 2, 2)
        plt.imshow(mask_array[int(mask_array.shape[0]/2), :, :], cmap='gray')
        plt.title('Mask')
    else:
        plt.imshow(image_array[int(image_array.shape[0]/2), :, :], cmap='gray')
        plt.title('Image')
    plt.show()

show_image(image, mask)

extractor.enableFeatureClassByName('ngtdm')
extractor.enableFeatureClassByName('gldm')

extractor.settings['binWidth'] = 25  # Adjust as needed based on intensity distribution of your images

import seaborn as sns
import numpy as np

corr_matrix = df.corr().abs()
sns.heatmap(corr_matrix, cmap="coolwarm")

from sklearn.feature_selection import SelectKBest, f_classif

X = df.drop(['Image', 'Mask', 'Label'], axis=1)
y = your_target_variable  # Define your target variable (tumor type, grade, etc.)

selector = SelectKBest(f_classif, k=10)
X_selected = selector.fit_transform(X, y)

from sklearn.metrics import classification_report, roc_auc_score
print(classification_report(y_test, y_pred))
print("AUC:", roc_auc_score(y_test, y_pred))

import tensorflow as tf
from tensorflow.keras import layers

def unet_model(input_shape):
    inputs = tf.keras.Input(input_shape)
    # Define the U-Net layers here
    return tf.keras.Model(inputs, outputs)

df_combined = pd.concat([df_radiomics, df_clinical], axis=1)

from mayavi import mlab
mlab.contour3d(sitk.GetArrayFromImage(image), contours=10, transparent=True)

